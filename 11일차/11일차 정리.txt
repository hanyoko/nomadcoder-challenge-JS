23/05/26

만들어진 버튼으로 어떤 것이 눌러졌는지 알고 싶을 때
console.dir(event.target);

부모를 확인할 수 있는 parentElement 또는 parentNode를 확인한다
parentElement: li
parentNode: li

삭제를 위해서는 해당 span태그의 부모를 알아야한다.

따라서 console.dir을 이용해서
    console.dir(event.target.parentElement.innerText);
a❌
b❌
c❌
클릭한 버튼의 console창에 해당 text가 입력된다.

const li = event.target.parentElement;
    li.remove();

button이 클릭된 span의 부모인 li를 remove한다.



localStorage는 데이터베이스가 아니다 todos array를 복사해두는 곳.
todos가 데이터베이스

localStorage에 담긴 값을 지워도 todos를 출력하면 값이 담겨있다.
["a","b","c","a"]의 배열이 있을 때 동일한 값 두개의 "a" 중에서 하나를 지우면 어떤 "a"를 지웠는지 알 수 없다
그래서 id를 부여하여 어떤 값이 지워졌는지 알도록 해야한다.
방법으로는 Date.now()를 이용해서 랜덤ID를 부여할 수 있다.


function filter(){

}
[1,2,3,4].filter(filter)

filter(1) = 1
filter(2) = 2
filter(3) x 
filter(4) = 4
만약, 3에서 false가 나오면 1,2,4만 유지된다

function filter(item){return item !== 3}
undefined
[1,2,3,4,5].filter(filter)
(4) [1, 2, 4, 5]0: 11: 22: 43: 5length: 4[[Prototype]]: Array(0)

const arr = ["pizza","banana","tomato"]
undefined
function filter(food){return food !== "banana"}
undefined
arr.filter(filter)
(2) ['pizza', 'tomato']

filter 함수가 할 일은 질문을 던지는 것이다. 혹은 item을 제외할지
코드를 해석해보면 food 값을 출력하고 싶은데 banana가 아니면 return 되는 것이다
따라서 banana는 filter 되고 pizza와 tomato가 출력된다

const arr = [123,5454,223,122,45,6775,334]
undefined
function filter(number){return number <= 1000}
undefined
arr.filter(filter)
(5) [123, 223, 122, 45, 334]

1000보다 작은 숫자들은 filter 되었다.

const toDos = [{"text":"a","id":1685103213017},{"text":"b","id":1685103213251},{"text":"c","id":1685103213400}]
undefined
function filter(toDo){return toDo.id !== 1685103213017}
undefined
toDos.filter(filter)
(2) [{…}, {…}]0: {text: 'b', id: 1685103213251}1: {text: 'c', id: 1685103213400}length: 2[[Prototype]]: Array(0)

const arr = [1,2,3,4]
undefined
arr.filter(item => item > 2)
(2) [3, 4]
arr
(4) [1, 2, 3, 4]
const newArr = arr.filter(item => item > 2)
undefined
arr
(4) [1, 2, 3, 4]
newArr
(2) [3, 4]


<getCurrentPosition> 위치 알아내는 함수
https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition
GeolocationPosition {coords: GeolocationCoordinates, timestamp: 1685105875896}
coords
: 
GeolocationCoordinates
accuracy
: 
2097.9218487155595
altitude
: 
null
altitudeAccuracy
: 
null
heading
: 
null
latitude
: 
35.4940869
longitude
: 
129.4346605
speed
: 
null
[[Prototype]]
: 
GeolocationCoordinates
timestamp
: 
1685105875896
[[Prototype]]
: 
GeolocationPosition
coords
: 
(...)
timestamp
: 
(...)
constructor
: 
ƒ GeolocationPosition()
Symbol(Symbol.toStringTag)
: 
"GeolocationPosition"
get coords
: 
ƒ coords()
get timestamp
: 
ƒ timestamp()
[[Prototype]]
: 
Object

콘솔창에 이렇게 나온다.

------------------------------------------------------
index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./css/style.css">
</head>
<body>
    <h2 id="clock">00:00:00</h2>
    <form id="login-form" class="hidden">
        <input
            required 
            maxlength="15"
            type="text"
            placeholder="What is your name" />
        <!-- <button>Log In</button> -->
        <input type="submit" value="Log In" />
    </form>
    <h1 id="greeting" class="hidden"></h1>
    <!-- <a href="https://nomadcoders.co">Go to courses</a> -->
    <form id="todo-form">
        <input type="text" placeholder="Write a To Do and Press Enter" required />
    </form>
    <ul id="todo-list">
        <!-- 이렇게 생성되도록 할 것이다. -->
        <!-- <li>
            <span>hello</span>
        </li> -->
    </ul>
    <div id="quote">
        <span></span>
        <span></span>
    </div>
    <div id="weather">
        <span></span>
        <span></span>
    </div>
    <script src="./js/greeting.js"></script>
    <script src="./js/clock.js"></script>
    <script src="./js/quotes.js"></script>
    <script src="./js/background.js"></script>
    <script src="./js/todo.js"></script>
    <script src="./js/weather.js"></script>
</body>
</html>
------------------------------------------------------
style.css
  
.hidden {
    display: none;
}
------------------------------------------------------
quotes.js
const quotes = [
    {
        quote: "노력 없이 얻는 것은 성취감이 없다.",
        author: "Thomas Edison"
    },
    {
        quote: "목표를 세우고 그 목표를 이루기 위해 최선을 다하라. 당신이 할 수 있다고 믿을 때, 당신은 이미 반 이상 성공한 것이다.",
        author: "Theodore Roosevelt"
    },
    {
        quote: "성공은 결코 최종 목표가 아니라, 실패에서 실패로 걸어가는 과정에서 온다.",
        author: "Winston Churchill"
    },
    {
        quote: "당신이 세상을 변화시키려고 기다린다면, 당신은 아무것도 이룰 수 없다. 변화는 당신으로부터 시작되어야 한다.",
        author: "Mahatma Gandhi"
    },
    {
        quote: "가장 훌륭한 시간은 언제인가? 10년 전이었다. 다음으로 좋은 시간은 오늘이다.",
        author: "Yohan Ko"
    },
    {
        quote: "중요한 것은 사랑을 받는 것이 아니라 사랑을 하는 것이었다.",
        author: "William Somerset Maugham"
    },
    {
        quote: "한 방향으로 깊이 사랑하면 다른 방향으로의 사랑도 깊어진다.",
        author: "Anne-Sophie Swetchine"
    },
    {
        quote: "사랑 받고 싶다면 사랑하라, 그리고 사랑스럽게 행동하라.",
        author: "Benjamin Franlin"
    },
    {
        quote: "20대에는 의지, 30대에는 기지, 40대에는 판단이 지배한다.",
        author: "Benjamin Franklin"
    },
    {
        quote: "인생은 거울과 같으니, 비친 것을 밖에서 들여다 보기 보다 먼저 자신의 내면을 살펴야 한다.",
        author: "Wally Famous Amos"
    },
];

const quote = document.querySelector("#quote span:first-child");
const author = document.querySelector("#quote span:last-child");
const todaysQuote = quotes[Math.floor(Math.random() * quotes.length)];

quote.innerText = todaysQuote.quote;
author.innerText = todaysQuote.author;
------------------------------------------------------
clock.js
const clock = document.querySelector("h2#clock");

// function sayHello(){
//     console.log("Hello");
// }

// setInterval(sayHello, 5000);

// function sayHello2(){
//     console.log("Hi");
// }

// setTimeout(sayHello2, 5000);

function getClock(){
    const date = new Date();
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    const seconds = String(date.getSeconds()).padStart(2, "0");
    clock.innerText = `${hours}:${minutes}:${seconds}`;
}
getClock();
setInterval(getClock, 1000);
------------------------------------------------------
backgorund.js
const images = ["0.jpg", "1.jpg", "2.jpg"];

const chosenImage = images[Math.floor(Math.random() * images.length)];

// console.log(chosenImage);

//html에 img 추가하기
const bgImage = document.createElement("img");
bgImage.src = `img/${chosenImage}`;

// console.log(bgImage);

document.body.appendChild(bgImage);
------------------------------------------------------
greeting.js
const loginForm = document.querySelector("#login-form")
const loginInput = document.querySelector("#login-form input");
const greeting = document.querySelector("#greeting");

const HIDDEN_CLASSNAME = "hidden";
const USERNAME_KEY = "username";

function onLoginSubmit(event) {
    event.preventDefault();
    //기본행동이란 어떤 function에 대해 브라우저가 기본적으로 수행하는 동작
    //누군가 form을 submit 하면 브라우저는 기본적으로 페이지를 새로고침한다.
    //preventDefault()를 추가함으로써 그 기본동작을 막는다.
    
    console.log(loginInput.value);
    loginForm.classList.add(HIDDEN_CLASSNAME);
    const username = loginInput.value;
    localStorage.setItem(USERNAME_KEY, username);
    //이제부터 input에 username을 입력하면 localstorage에 이름이 저장된다.

    //greeting.innerText = "Hello " + username;
    //더 편한 방법
    //만약 변수와 string을 합치고 싶을 때 위와 같이 표현 `` 안에 작성해야한다.
    //greeting.innerText = `Hello ${username} keep going`;
    //greeting.classList.remove(HIDDEN_CLASSNAME);
    paintGreeting(username);
}

loginForm.addEventListener("submit", onLoginSubmit);
//addEventListner를 사용하는 것은 function을 바로 사용하려는 것이 아니다.
//그래서 onLoginSubmit() 과 같이 함수 실행을 적으면 안 된다.
//지정된 값이 있을 때만 실행시킨다.

function paintGreeting(username) {
    greeting.innerText = `Hello ${username}`;
    greeting.classList.remove(HIDDEN_CLASSNAME);
}

const savedUsername = localStorage.getItem(USERNAME_KEY);

if(savedUsername === null) {
    //show the form
    loginForm.classList.remove(HIDDEN_CLASSNAME);
    loginForm.addEventListener("submit", onLoginSubmit);
} else {
    //show the greetings
    // greeting.innerText = `Hello ${savedUsername}`;
    // greeting.classList.remove(HIDDEN_CLASSNAME);     함수로 만들었음
    paintGreeting(savedUsername);
}

------------------------------------------------------------------
todo.js
const todoForm = document.getElementById("todo-form");
const todoInput = document.querySelector("#todo-form input");
const todoList = document.getElementById("todo-list");

const TODOS_KEY = "todos";

let todos = [];     //const를 let으로 수정
//why? const는 변경이 불가능하기때문에 let으로 바꿔준다.

function saveTodos(){
    localStorage.setItem(TODOS_KEY, JSON.stringify(todos));   //todos의 배열을 localstorage에 담는 과정
    //JSON.stringify() : 텍스트를 배열로 만들어준다.
}

function deleteTodo(event){
    //console.log("lalala");  //하지만 어떤 버튼인지 알 수가 없다
    // console.dir(event.target.parentElement.innerText);
    const li = event.target.parentElement;
    //console.log(li.id); //지우고자하는 todo의 id가 출력된다.
    li.remove();
    todos = todos.filter((todo) => todo.id !== parseInt(li.id));    //하지만 지워지지않는다.
    //why? li.id는 string 타입이고. todo.id는 number 타입이기 때문에 아예 다른 것으로 되어 아무것도 지워지지않는다.
    //그래서 li.id를 parseInt로 묶어준다.
    saveTodos();    //saveTodoe를 불러주지 않으면 localStorage에서 지워지지않아서 새로고침하면 다시 지운 값이 생긴다.
}

function paintTodo(newTodo){
    // console.log("I will paint", newTodo);
    const li = document.createElement("li");
    li.id = newTodo.id;
    const span = document.createElement("span");
    span.innerText = newTodo.text;      //값이 text가 아닌 object object로 뜨는 것을 정상작동을 위해 .text를 붙여준다.
    const button = document.createElement("button");
    button.innerText = "❌";
    button.addEventListener("click", deleteTodo)
    li.appendChild(span);
    li.appendChild(button);
    // console.log(li);
    todoList.appendChild(li);
    //여기까지 하면 지울 수 없다는 것과 새로고침하면 사라진다는 문제가 있다.
    //그래서 button을 만들었다.
}

function handleTodoSubmit(event){
    event.preventDefault();
    //console.log(todoInput.value);
    const newTodo = todoInput.value;    //input의 현재 value를 새로운 변수에 복사
    todoInput.value = "";
    // console.log(newTodo, todoInput.value);
    const newTodoObj = {
        text: newTodo,
        id: Date.now()
    };      //Obj를 이용해서 랜덤 ID를 부여한다.
    todos.push(newTodoObj);     //newTodo에서 newTodoObj로 변경
    paintTodo(newTodoObj);     //newTodo에서 newTodoObj로 변경
    //설명 =>
    //사용자가 form을 submit 하면, 우리는 input을 비우고
    //그 텍스트(newTodo)를 todos array(배열)에 push 하고
    //그 다음에는, 화면에 todo를 그려주고
    saveTodos();
    //그러고 나서 바로 여기에서 saveTodos를 하면 된다. todo들을 저장해주는 것
    //임의로 a,b,c,d ... todo를 만들어주고 localstorage를 확인해보면 담겨있는 것을 확인할 수 있다.
    //하지만, 새로고침하면 화면에서는 사라지고 localstroage에는 담겨있다
    //또, 새롭게 a를 입력하면 기존의 항목은 사라지고 a만 localstorage에 담겨있는 것을 볼 수 있다.
    //
}

todoForm.addEventListener("submit", handleTodoSubmit);

//array의 각 item에 대해 하나의 function을 실행할 수 있는 첫번째방법
/*
function sayHello(item){
    console.log("this is the turn of", item);
}
*/
const savedTodos = localStorage.getItem(TODOS_KEY);

if(savedTodos !== null){
    const parsedTodos = JSON.parse(savedTodos);
    //console.log(parsedTodos);
    //parsedTodos.forEach(sayHello);
    //array의 각 item에 대해 하나의 function을 실행할 수 있는 두번째방법
    //parsedTodos.forEach((item) => console.log("this is the turn of", item));
    
    todos = parsedTodos;    //todo 업데이트를 위해 추가해줬다.
    //이렇게 하면 todos는 빈 array였다가 이전 todos를 함께 저장하여 모든 element를 저장하는 todos가 된다.
    
    parsedTodos.forEach(paintTodo);
    //forEach가 실행되면 paintTodo가 실행된다.
    //ex) paintTodo({text: "a", id:121212})
}
//여기까지 이루어지면 input에 입력한 값이 localstorage에 저장은 되지만 새로운 텍스트를 입력하면 리셋이 되는 현상을 볼 수 있다.
//이것의 이유는 변수 todos를 보면 todos = []; 로 항상 비어있기 때문이다.
//newTodo를 작성하고 form을 submit 할 때마다 newTodo를 todos array(빈 array)에 그냥 push 하게 된다.
//그리고 todo를 저장할 때 새로운 todo들만 포함하고 있는 array를 저장하기 때문이다.
//이때 전에 있던 todo들은 갖고 있지 않다.
//따라서, 우리가 갖고있던 todos의 이전 복사본을 잊어버리고 있다는 뜻이다.
//todos를 수정한다.
//해결방법 ->
//appalication이 시작될 때 todos array를 빈값으로 시작하는 대신에
//const를 let으로 변경하여 업데이트가 가등하도록 만들고
//localstorage에 todo들이 있으면, todos에 parsedTodos를 넣어서 전에 있던 todo들을 복원한다.

// function filter(){

// }
// [1,2,3,4].filter(filter)

// filter(1) = 1
// filter(2) = 2
// filter(3) x 
// filter(4) = 4
// 만약, 3에서 false가 나오면 1,2,4만 유지된다
-----------------------------------------------------------------------
weather.js
const API_KEY = "fe47bd82d2bf013b60f0a0cd0227ea20";
function onGeoOk(position){
    const lat = position.coords.latitude;   //위도
    const lng = position.coords.longitude;  //경도
    console.log("You live in", lat, lng);
    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${API_KEY}&units=metric`;
    fetch(url)
        .then((response) => response.json())
        .then((data) => {
            const weather = document.querySelector("#weather span:first-child")
            const city = document.querySelector("#weather span:last-child")
        city.innerText = data.name
        weather.innerText = `${data.weather[0].main} / ${data.main.temp}`;
    });

    //fetch 작동하는법
    //fetch는 promise이다
    //promise는 당장 뭔가 일어나지 않고 시간이 좀 걸린 뒤에 일어나는 것
    //서버에 뭔가 물어봤는데 서버가 응답하는 데 5분 걸린다고 해보자, 그러면 서버의 응답을 기다려야한다.
    //그래서 then을 사용해야한다.
    //이제 어떤 일이 일어나냐면, URL을 fetch하고 .. 그 다음으로 response를 받아야한다.
    //그리고 response의 json을 받아야한다.
    //그리고 내용을 추출했으면 data를 얻을 것이다. 

}
function onGeoError(){
    alert("Can't find you. No weather for you.");
}


navigator.geolocation.getCurrentPosition(onGeoOk, onGeoError);








-----------------------------------------------------
과제 제출 링크
