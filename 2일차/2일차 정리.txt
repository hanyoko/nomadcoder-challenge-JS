23/05/16

2는 interger
2.2는 float 라고 부른다.

65656565656 + 2.5
-> interger과 float를 더할 수 있다.

string : 처음부터 끝까지 모두 글자로 이뤄져있다

variable : value를 저장 또는 고정시켜놓는다.

const : 바뀌지 않은 값
- const로 변수를 설정하면 값을 바꿀 수 없다
ex)
const a = 5;
 console.log(a + 2);
 console.log(a * 2);
 console.log(a / 2);
but, const가 없다면
 console.log(5 + 2);
 console.log(5 * 2);
 console.log(5 / 2);
숫자를 변경할 때 6번을 바꿔야한다.
const 설정을 통해 한번에 const에 담긴 값만 변경하면 따로 변경하지않아도 된다.

const myName = "nico";
- const 값을 설정할 때 다른 단어를 사용할 때는 대문자를 사용하여 구분할 수 있도록 하는 것이 편리하다.
모두 소문자로 작성해도 에러를 일으키지는 않지만, 같이 일하는 사람들이 불편함을 느낄 수 있다.
이를 camelcase라고 한다.
- my_name 은 snake_case (파이썬에서 주로 사용)

const 를 let으로 변경한다면 ?
console.log 출력값에는 영향이 없다.

차이점
-> constant(상수)라는 것이고, constant는 값이 바뀔 수가 없다.

const a = 5;
const b = 2;
let myName = "yohan";
 console.log(a + b);
 console.log(a * b);
 console.log(a / b);
 console.log("hello" + myName);

myName = "yohanko";
 //여기서부터 myName은  yohan이 아니라 yohanko로 변경된다.
 //let을 사용하면 저장된 veriable을 변경할 수 있다는 말 !
 //하지만, const를 사용한다면 아래에서 저장된 값을 변경할 수 없다 ! 그것이 차이점 !
 //이를 해석하면, 여기서부터 myName의 값은 변경되었구나 라고 해석가능
 //variable을 업데이트 !
 
 console.log("your new name is " + myName);

//그러면 let만 사용할까 ? 아니면 const를 사용해야할까?
//보통의 프로그래머들은 const를 사용하지만 변수를 업데이트 하고 싶을 때 let을 사용한다.
//기본적으로는 cosnt를 사용, 필요할 때는 let을 사용한다고 기억 !

var c = 1;
var d = 9;

//처음에는 var을 사용했지만, 값을 보호받지 못해서 const와 let이 생기게 되었다.
//물론, var을 사용하는 것은 출력에 문제가 되지 않지만 새롭고 더 나은 것을 따른 것이 더 좋다 !


//boolean 
//true 또는 false

// const amIFat = true;
//true : 켜져있음

// const amIFat = false;
//fasel : 꺼져있음

const amIFat = null;
//null은 nothing 아무것도 아닌, 값이 없는 상태
//null은 자연적으로 생기지 않는다.
//null : 비어있어요

let something;
//variable은 존재하지만 값은 존재하지않는다.

console.log(amIFat);
console.log(something);


----------------------
const mon = "mon";
const tue = "tue";
const wed = "wed";
const thu = "thu";
const fri = "fri";
const sat = "sat";
const sun = "sund";

// const daysOfWeek = mon+tue+wed+thu+fri+sat+sun;
//이렇게 작성할 수도 있지만 원하는 값을 부를 수 없다.
//그래서 array 라는 것을 사용하여 아래와 같이 작성한다.

const daysOfWeek = [mon, tue, wed, thu, fri, sat, sun]
// const nonsense = [1, 2, "hello", true, false, null, undefined, "yohan"]
//데이터로 이루어진 리스트

console.log(daysOfWeek);

----------------------
const daysOfWeek = ["mon", "tue", "wed", "thu", "fri", "sat"];

// console.log(daysOfWeek[5]);
//array 안에 있는 텍스트를 불러오고 싶을 때, 배열의 순서를 []안에 적으면 출력된다.
//컴퓨터는 0부터 센다. 따라서 0,1,2,3,4,5 ... 로 배열의 순서가 적용된다.
//array 안에서 항목을 받아오기 / array에 항목 추가

//array에서 아이템 받아오기
console.log(daysOfWeek);

//array 안에 요일 더 추가하기
daysOfWeek.push("sun");
//push에서는 array에 하나를 더 추가하려고 할 때 사용

console.log(daysOfWeek);
-------------------------
const toBuy = ["potato", "tomato", "pizza"];
console.log(toBuy);
toBuy.push("kimbab");
console.log(toBuy);

console.log(toBuy[2]);  //pizza
-------------------------
//object

const playerName = "yohan";
const playerPoints = 121212;
const playerHandsome = false;
const playerFat = "little bit";

// const player = ["yohan", 1212, false, "little bit"]

const player = {
    name: "yohan",
    points: 10,
    fat: true,
};
console.log(player);
console.log(player.name);
console.log(player["name"]);        //console.log(player.name);와 같은 출력방법
player.lastName = "ko";             //player의 object 안에 lastName 추가
player.points = 15;                 //player의 points를 15로 수정
console.log(player);

player.points = player.points + 15; //player.points에 값 더하기
console.log(player);

//object 안과 밖의 규칙은 다르다.


